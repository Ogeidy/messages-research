AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Messages Project

Globals:
  Function:
    Timeout: 3
    Handler: app.lambda_handler
    Runtime: python3.8

Parameters:
  CognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Enter a string. Must be alpha numeric 3-63 in length.
    Default: messages-auth
  BucketName:
    Type: String
    Default: messages-frontend-bucket

Resources:
  # --- AWS API Gateway ---

  MessagesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      Auth:
        DefaultAuthorizer: MessagesApiCognitoAuthorizer
        Authorizers:
          MessagesApiCognitoAuthorizer:
            UserPoolArn: !GetAtt MessagesUserPool.Arn

  # --- AWS Cognito ---

  MessagesUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  MessagesUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${CognitoDomain}-user-pool-client
      UserPoolId: !Ref MessagesUserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://d21j5of51ybpn6.cloudfront.net
      LogoutURLs:
        - https://d21j5of51ybpn6.cloudfront.net
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO

  MessagesUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref MessagesUserPool

  # --- AWS S3 ---

  MessagesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketName

  MessagesCloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "cloudfront origin identity for bucket"

  MessagesS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Statement:
          - Action: ["s3:GetObject"]
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${MessagesCloudFrontOriginIdentity}"
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  # --- AWS CloudFront ---

  MessagesDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Messages cloudfront distribution
        Enabled: "true"
        PriceClass: PriceClass_100
        DefaultRootObject: index.html
        Origins:
          - Id: messages-frontend
            DomainName: !GetAtt MessagesS3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${MessagesCloudFrontOriginIdentity}"
          - Id: messages-backend
            DomainName: !Sub "${MessagesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: ["TLSv1.2"]
        DefaultCacheBehavior:
          TargetOriginId: messages-frontend
          AllowedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - TargetOriginId: messages-backend
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: "/api/*"
            CachePolicyId: !Ref MessagesApiCachePolicy
            OriginRequestPolicyId: !Ref MessagesApiOriginRequestPolicy
        

  MessagesApiCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-api-cache-policy"
        Comment: "Cache policy for api requests"
        DefaultTTL: 0
        MaxTTL: 1
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: false
          EnableAcceptEncodingBrotli: false
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Authorization
          QueryStringsConfig:
            QueryStringBehavior: all

  MessagesApiOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub "${AWS::StackName}-api-origin-request-policy"
        Comment: "Origin Request policy for filtering data forwarded to api requests"
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: none
        QueryStringsConfig:
          QueryStringBehavior: all

  # --- AWS DynamoDB ---

  MessagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # --- AWS SQS ---

  MessagesQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MessagesDeadLetterQueue.Arn
        maxReceiveCount: 5

  MessagesDeadLetterQueue:
    Type: AWS::SQS::Queue

  # --- AWS Lambda ---

  SendMessage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send_message
      Environment:
        Variables:
          MESSAGES_TABLE_NAME: !Ref MessagesTable
      Policies:
        - Statement:
            - Sid: PutMessagesTablePolicy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MessagesTable}"
      Events:
        SendMessageEvent:
          Type: Api
          Properties:
            Path: /send-message
            Method: POST
            RestApiId: !Ref MessagesApi

  ReadFromDb:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/read_from_db
      Environment:
        Variables:
          MESSAGES_TABLE_NAME: !Ref MessagesTable
          MESSAGES_QUEUE_NAME: !GetAtt MessagesQueue.QueueName
      Policies:
        - Statement:
            - Sid: ScanMessagesTablePolicy
              Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MessagesTable}"
            - Sid: SendSQSPolicy
              Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:GetQueueUrl
              Resource: !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${MessagesQueue.QueueName}"
      Events:
        ReadFromDbEvent:
          Type: Api
          Properties:
            Path: /read-from-db
            Method: GET
            RestApiId: !Ref MessagesApi

  ReadFromSqs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/read_from_sqs
      Environment:
        Variables:
          MESSAGES_QUEUE_NAME: !GetAtt MessagesQueue.QueueName
      Policies:
        - Statement:
            - Sid: ReceiveDeleteSQSPolicy
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueUrl
              Resource: !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${MessagesQueue.QueueName}"
      Events:
        ReadFromSqsEvent:
          Type: Api
          Properties:
            Path: /read-from-sqs
            Method: GET
            RestApiId: !Ref MessagesApi

  GetIp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_ip
      Layers:
        - !Ref RequestsLayer
      Events:
        GetIpEvent:
          Type: Api
          Properties:
            Path: /get-ip
            Method: GET
            RestApiId: !Ref MessagesApi

  # --- AWS Lambda Layer ---

  RequestsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: requests-layer
      Description: Requests layer
      ContentUri: ./layers/requests/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.8

Outputs:
  MessagesDistributionId:
    Description: "Messages CloudFront distribuition id"
    Value: !Ref MessagesDistribution
  MessagesDistributionDomainName:
    Description: "Messages CloudFront distribuition domain name"
    Value: !GetAtt  MessagesDistribution.DomainName
  CognitoUserPoolID:
    Value: !Ref MessagesUserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref MessagesUserPoolClient
    Description: The app client
  CognitoUserPoolDomain:
    Value: !Ref MessagesUserPoolDomain
    Description: The UserPool domain
